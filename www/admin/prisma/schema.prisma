generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

generator zod {
    provider                 = "zod-prisma-types"
    createInputTypes         = false
    writeNullishInModelTypes = true
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    schemas  = ["admin", "frontend"]
}

// Admin schema
model User {
    id        String @id @unique
    name      String
    last_name String
    email     String @unique

    auth_session Session[]
    auth_key     Key[]

    @@map("user")
    @@schema("admin")
}

model Session {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt

    user User @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("session")
    @@schema("admin")
}

model Key {
    id              String  @id @unique
    hashed_password String?
    user_id         String

    user User @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("key")
    @@schema("admin")
}

// Frontend schema
model Config {
    id          String @id @default(cuid())
    title       String
    description String
    language    String

    @@map("config")
    @@schema("frontend")
}

model Token {
    id    String @id @default(cuid())
    token String

    @@map("token")
    @@schema("frontend")
}

model Page {
    id          String   @id @default(cuid())
    name        String
    url         String   @unique
    parent_id   String?
    is_group    Boolean  @default(false)
    last_update DateTime @default(now())

    parent     Page?               @relation("page", fields: [parent_id], references: [id], onDelete: Cascade)
    children   Page[]              @relation("page")
    components ComponentInstance[]

    @@index([parent_id])
    @@map("page")
    @@schema("frontend")
}

model ComponentDefinitionGroup {
    id              String   @id @default(cuid())
    name            String
    parent_group_id String?
    last_update     DateTime @default(now())

    parent_group         ComponentDefinitionGroup?  @relation("component_definition_group", fields: [parent_group_id], references: [id], onDelete: Cascade)
    groups               ComponentDefinitionGroup[] @relation("component_definition_group")
    component_definitons ComponentDefinition[]

    @@map("component_definition_group")
    @@schema("frontend")
}

model ComponentDefinition {
    id          String   @id @default(cuid())
    name        String
    group_id    String
    last_update DateTime @default(now())

    group             ComponentDefinitionGroup   @relation(fields: [group_id], references: [id], onDelete: Cascade)
    field_definitions ComponentFieldDefinition[]
    components        ComponentInstance[]

    @@index([group_id])
    @@map("component_definition")
    @@schema("frontend")
}

model ComponentFieldDefinition {
    id                      String             @id @default(cuid())
    name                    String
    type                    ComponentFieldType
    component_definition_id String

    component_definition ComponentDefinition @relation(fields: [component_definition_id], references: [id], onDelete: Cascade)

    @@index([component_definition_id])
    @@map("component_field_definition")
    @@schema("frontend")
}

model ComponentInstanceField {
    id           String @id @default(cuid())
    component_id String
    /// If type is a primitive type, then data is a string
    /// If type is a complex type, then data is a JSON object
    /// If type is a component, then data is that component's id
    data         String

    component ComponentInstance @relation(fields: [component_id], references: [id])

    @@index([component_id])
    @@map("component_instance_field")
    @@schema("frontend")
}

model ComponentInstance {
    id            String @id @default(cuid())
    name          String
    page_id       String
    definition_id String

    page       Page                     @relation(fields: [page_id], references: [id])
    definition ComponentDefinition      @relation(fields: [definition_id], references: [id])
    fields     ComponentInstanceField[]

    @@index([page_id])
    @@map("component_instance")
    @@schema("frontend")
}

enum ComponentFieldType {
    STRING
    NUMBER
    BOOLEAN
    COMPONENT

    @@map("component_field_type")
    @@schema("frontend")
}
