generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

generator zod {
    provider                 = "zod-prisma-types"
    createInputTypes         = false
    writeNullishInModelTypes = true
}

generator erd {
    provider = "prisma-erd-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model AdminUser {
    id        String @id @unique
    name      String
    last_name String
    email     String @unique

    auth_session AdminSession[]
    auth_key     AdminKey[]

    @@map("admin_user")
}

model AdminSession {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt

    user AdminUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("admin_session")
}

model AdminKey {
    id              String  @id @unique
    hashed_password String?
    user_id         String

    user AdminUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("admin_key")
}

model SettingsSeo {
    id          String @id @default(cuid())
    title       String
    description String
    language    String

    @@map("settings_seo")
}

model SettingsConnection {
    id              String @id @default(cuid())
    token           String
    development_url String

    @@map("settings_connection")
}

model Page {
    id          String   @id @default(cuid())
    name        String
    url         String   @unique
    parent_id   String?
    is_group    Boolean  @default(false)
    last_update DateTime @default(now())

    parent     Page?               @relation("page", fields: [parent_id], references: [id], onDelete: Cascade)
    children   Page[]              @relation("page")
    components ComponentInstance[]

    @@index([parent_id])
    @@map("page")
}

model ComponentDefinitionGroup {
    id              String   @id @default(cuid())
    name            String
    parent_group_id String?
    last_update     DateTime @default(now())

    parent_group          ComponentDefinitionGroup?  @relation("component_definition_group", fields: [parent_group_id], references: [id], onDelete: Cascade)
    groups                ComponentDefinitionGroup[] @relation("component_definition_group")
    component_definitions ComponentDefinition[]

    @@map("component_definition_group")
}

model ComponentDefinition {
    id          String   @id @default(cuid())
    name        String   @unique
    group_id    String
    last_update DateTime @default(now())

    group             ComponentDefinitionGroup   @relation(fields: [group_id], references: [id], onDelete: Cascade)
    field_definitions ComponentDefinitionField[]
    instances         ComponentInstance[]

    @@index([group_id])
    @@map("component_definition")
}

model ComponentDefinitionField {
    id                      String             @id @default(cuid())
    name                    String
    type                    ComponentFieldType
    array_item_type         ArrayItemType?
    order                   Int
    component_definition_id String

    component_definition ComponentDefinition      @relation(fields: [component_definition_id], references: [id], onDelete: Cascade)
    instances            ComponentInstanceField[]

    @@index([component_definition_id])
    @@map("component_definition_field")
}

model ComponentInstance {
    id                  String  @id @default(cuid())
    page_id             String
    parent_component_id String?
    definition_id       String
    order               Int

    page              Page                     @relation(fields: [page_id], references: [id])
    parent_component  ComponentInstance?       @relation("component_instance", fields: [parent_component_id], references: [id], onDelete: Cascade)
    nested_components ComponentInstance[]      @relation("component_instance")
    definition        ComponentDefinition      @relation(fields: [definition_id], references: [id])
    fields            ComponentInstanceField[]

    @@index([page_id])
    @@map("component_instance")
}

model ComponentInstanceField {
    id                   String  @id @default(cuid())
    component_id         String
    field_definition_id  String
    /// If type is a primitive type, then data is a string
    /// If type is an array, then data is empty, and array items reference this field's id in their `parent_field_id`
    /// If type is a component, then data is that component's id
    /// If type is RICH_TEXT, then data is Slate JSON
    data                 String
    serialized_rich_text String?

    component   ComponentInstance        @relation(fields: [component_id], references: [id], onDelete: Cascade)
    definition  ComponentDefinitionField @relation(fields: [field_definition_id], references: [id])
    array_items ArrayItem[]

    @@index([component_id])
    @@map("component_instance_field")
}

model ArrayItem {
    id              String @id @default(cuid())
    data            String
    order           Int
    parent_field_id String

    parent_field ComponentInstanceField @relation(fields: [parent_field_id], references: [id], onDelete: Cascade)

    @@map("array_item")
}

enum ComponentFieldType {
    TEXT
    RICH_TEXT
    NUMBER
    SWITCH
    COMPONENT
    COLLECTION

    @@map("component_field_type")
}

enum ArrayItemType {
    TEXT
    NUMBER
    SWITCH
    COMPONENT

    @@map("array_item_type")
}
